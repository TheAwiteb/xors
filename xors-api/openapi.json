{
  "openapi": "3.1.0",
  "info": {
    "title": "XORS API",
    "description": "XORS is a simple API of XO game, supports multiplayer. You can find the repository of XORS [here](https://github.com/TheAwiteb/xors).\n\n### Authnication and Authorization in XORS\n\nWe use JWT for authentication and authorization in XORS. The JWT token is generated by the XORS server and is sent to the client. The client then sends the JWT token in the header of each request to the server. The server then verifies the token and grants access to the client.\n\n#### Captcha\n\nWhen you signup or signin to XORS, you need to get the captcha from `/auth/captcha` it's returns a captcha token and captcha image (base64 encoded). You need to send the captcha token and captcha answer to the endpoint in the header. The captcha token is **valid for 5 minutes**, if the captcha token is expired, you need to get a new captcha token. The captcha token can be **used only once**.\n\n##### The required headers\n- `X-Captcha-Token`: The captcha token.\n- `X-Captcha-Answer`: The captcha answer.\n\n#### Rate Limit\n\nFor each IP address, you can send **1500 requests** per minute to the XORS server. If you exceed this limit, you will receive a `429 Too Many Requests` error. For **unauthenticated** requests, the rate limit allows for up to **30 requests** per minute and it's enough for signup and signin to XORS.\n\n##### Headers\n- `X-RateLimit-Limit`: The maximum number of requests that the consumer is permitted to make per minute.\n- `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window.\n- `X-RateLimit-Reset`: The time at which the current rate limit window resets in UTC epoch seconds.\n\n\n#### JWT Token\n\nWhen you signup or signin to XORS, the server generates a JWT token and sends it to you, which you can use to access the XORS API. The The token is sent in the `Authorization` header of each request to the server. The token is **valid for 1 hour** and the refresh token is **valid for 3 hours** and available **after 58 minuts after generate it**. If the JWT and refresh token is expired, you need to signin again to get a new tokens.\n",
    "license": {
      "name": "AGPL-3.0-or-later",
      "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/auth/captcha": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Create a new captcha.",
        "description": "Create a new captcha.\n\nThis endpoint will create a new captcha and return the captcha token and the captcha image as base64.\n- The token are valid for 5 minutes.\n- The token can only be used one time correctly.\n- If the token is used incorrectly, it will not be deleted and can be used again until it expires.",
        "operationId": "create_captcha",
        "responses": {
          "200": {
            "description": "Captcha created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaptchaSchema"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh a JWT token.",
        "description": "Refresh a JWT token.\n\nThis endpoint will return a new JWT token with the refresh token.\nNote: You need to authorize with the refresh token to get a new JWT token.",
        "operationId": "refresh_token",
        "responses": {
          "200": {
            "description": "JWT token refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSigninSchema"
                }
              }
            }
          },
          "400": {
            "description": "The token is not a refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, missing JWT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "403": {
            "description": "The refresh token is not active yet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/auth/signin": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Signin a user.",
        "description": "Signin a user.\n\nThis endpoint will return a JWT token with a refresh token.",
        "operationId": "signin_user",
        "parameters": [
          {
            "name": "X-Captcha-Token",
            "in": "header",
            "description": "The captcha token, get it from the `/auth/captcha` endpoint",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Captcha-Answer",
            "in": "header",
            "description": "The captcha answer, the text that in the captcha image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User signin data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigninSchema"
              },
              "example": {
                "password": "Password",
                "username": "Username"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User signed in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSigninSchema"
                }
              }
            }
          },
          "400": {
            "description": "Unprovided captcha token or answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "403": {
            "description": "Invalid captcha answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Sign up a new user.",
        "description": "Sign up a new user.\n\nThis endpoint will create a new user and return a JWT token.\n- `captcha_token`: The captcha token. Get it from the `/auth/captcha` endpoint.\n- `captcha_answer`: The captcha answer. The text that in the captcha image.",
        "operationId": "signup_user",
        "parameters": [
          {
            "name": "X-Captcha-Token",
            "in": "header",
            "description": "The captcha token, get it from the `/auth/captcha` endpoint",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Captcha-Answer",
            "in": "header",
            "description": "The captcha answer, the text that in the captcha image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New user data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserSchema"
              },
              "example": {
                "first_name": "First",
                "last_name": "Last",
                "password": "Password",
                "username": "Username"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSigninSchema"
                }
              }
            }
          },
          "400": {
            "description": "Unprovided captcha token or answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "403": {
            "description": "Invalid captcha answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          }
        }
      }
    },
    "/game/{uuid}": {
      "get": {
        "tags": [
          "Game"
        ],
        "summary": "Get the game by uuid.",
        "description": "Get the game by uuid.\n\n**Note**: This will return the game only if it's ended.",
        "operationId": "get_game_by_uuid",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The requested game's uuid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The game's info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameSchema"
                }
              }
            }
          },
          "400": {
            "description": "The uuid is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "404": {
            "description": "Game not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          }
        }
      }
    },
    "/games": {
      "get": {
        "tags": [
          "Game"
        ],
        "summary": "Get the lastest 10 games.",
        "description": "Get the lastest 10 games.\n\nThis endpoint will return the lastest 10 games, sorted by the creation date (newest first)\n\n**Note**: If the O player or the X player is deleted, the game will return it as deleted user, which it's uuid is `00000000-0000-0000-0000-000000000000` and username is `Deleted`.",
        "operationId": "get_lastest_games",
        "responses": {
          "200": {
            "description": "The lastest 10 games",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameSchema"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/{uuid}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns the user's profile image.",
        "description": "Returns the user's profile image.",
        "operationId": "get_user_profile_image",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The requested user's uuid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user's profile image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageSchema"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get the user's info.",
        "description": "Get the user's info.",
        "operationId": "get_user_info",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "description": "The requested user's uuid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user's info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update the user's info.",
        "description": "Update the user's info.",
        "operationId": "update_user_info",
        "requestBody": {
          "description": "Extract json format data from request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user's info has been updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema"
                }
              }
            }
          },
          "400": {
            "description": "The token is not a user token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, missing JWT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete the user's account.",
        "description": "Delete the user's account.\n\nThis endpoint will delete the user's account and all the user's data. Forever.",
        "operationId": "delete_user_info",
        "requestBody": {
          "description": "Extract json format data from request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user's account has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid password: The password is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, missing JWT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/me": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get me, the user that make the request.",
        "description": "Get me, the user that make the request.\n\nThis endpoint will return the user that make the request.",
        "operationId": "get_me",
        "responses": {
          "200": {
            "description": "The user's info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema"
                }
              }
            }
          },
          "400": {
            "description": "The token is not a user token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, missing JWT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/reset_password": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Reset the user's password.",
        "description": "Reset the user's password.",
        "operationId": "reset_user_password",
        "requestBody": {
          "description": "Extract json format data from request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user's password has been reset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "400": {
            "description": "The token is not a user token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, missing JWT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "BoardSchema": {
        "type": "object",
        "description": "The XO game board.",
        "required": [
          "cells",
          "played_cells"
        ],
        "properties": {
          "cells": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/XoSymbolSchema"
                }
              ],
              "nullable": true
            },
            "description": "The board cells."
          },
          "played_cells": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0.0
            },
            "description": "The sequence of the played cells.\nIt's shows the played cells in order by the index."
          }
        },
        "example": {
          "cells": [
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null
          ],
          "played_cells": []
        }
      },
      "CaptchaSchema": {
        "type": "object",
        "description": "The captcha schema. It's used to return the captcha token and the captcha image.",
        "required": [
          "captcha_token",
          "captcha_image",
          "expired_at"
        ],
        "properties": {
          "captcha_image": {
            "type": "string",
            "description": "The captcha image. It's a base64 string."
          },
          "captcha_token": {
            "type": "string",
            "format": "uuid",
            "description": "The captcha token. It's used to verify that the user is not a robot."
          },
          "expired_at": {
            "type": "string",
            "format": "date-time",
            "description": "The expiration date of the captcha token."
          }
        },
        "example": {
          "captcha_image": "<CAPTCHA_IMAGE_BASE64>",
          "captcha_token": "0ac14e75-d194-46b7-bb2a-1e472c1678c1",
          "expired_at": "2024-01-31T17:33:51.542211265"
        }
      },
      "DeleteUserSchema": {
        "type": "object",
        "description": "The delete user schema.",
        "required": [
          "password"
        ],
        "properties": {
          "password": {
            "type": "string",
            "description": "The user's password."
          }
        },
        "example": {
          "password": "password"
        }
      },
      "GameOverReasonSchema": {
        "type": "string",
        "description": "The Xo game over reason.",
        "enum": [
          "player_won",
          "draw",
          "player_disconnected"
        ],
        "example": "player_won"
      },
      "GameSchema": {
        "type": "object",
        "description": "The game's schema. It's used to return the game's data.",
        "required": [
          "uuid",
          "x_player",
          "o_player",
          "rounds_results",
          "created_at"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The game's creation date."
          },
          "o_player": {
            "$ref": "#/components/schemas/UserSchema"
          },
          "rounds_results": {
            "$ref": "#/components/schemas/RoundsResultSchema"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The game's uuid. It's unique."
          },
          "winner": {
            "type": "string",
            "format": "uuid",
            "description": "The game's winner. will be null if the game ended with a draw.",
            "nullable": true
          },
          "won_reason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GameOverReasonSchema"
              }
            ],
            "nullable": true
          },
          "x_player": {
            "$ref": "#/components/schemas/UserSchema"
          }
        },
        "example": {
          "created_at": "2024-01-31T17:33:51.542679355",
          "o_player": {
            "created_at": "2024-01-31T17:33:51.542679239",
            "draw": 0,
            "first_name": "First",
            "last_name": "Last",
            "losts": 0,
            "profile_image_path": "./profile_images/default",
            "username": "Username",
            "uuid": "0b0ff4b9-7c91-469a-97b7-8a0e84e72067",
            "wins": 0
          },
          "rounds_results": {
            "boards": [],
            "draws": 0,
            "o_player": 0,
            "x_player": 0
          },
          "uuid": "2f6f521d-eda2-4945-b28f-5cd63f248e6c",
          "winner": null,
          "won_reason": null,
          "x_player": {
            "created_at": "2024-01-31T17:33:51.542678409",
            "draw": 0,
            "first_name": "First",
            "last_name": "Last",
            "losts": 0,
            "profile_image_path": "./profile_images/default",
            "username": "Username",
            "uuid": "76d709bf-78ce-45ef-ac87-0cd348130d18",
            "wins": 0
          }
        }
      },
      "ImageSchema": {
        "type": "object",
        "required": [
          "image"
        ],
        "properties": {
          "image": {
            "type": "string",
            "example": "<IMAGE_BASE64>"
          }
        },
        "example": {
          "image": "<IMAGE_BASE64>"
        }
      },
      "MessageSchema": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "example": "Message"
          }
        },
        "example": {
          "message": "Message"
        }
      },
      "NewUserSchema": {
        "type": "object",
        "description": "The new user's schema. It's used to create a new user.",
        "required": [
          "first_name",
          "username",
          "password"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The user's first name. Can't contain spaces.",
            "maxLength": 32,
            "minLength": 1
          },
          "last_name": {
            "type": "string",
            "description": "The user's last name. Can't contain spaces.",
            "nullable": true,
            "maxLength": 32,
            "minLength": 1
          },
          "password": {
            "type": "string",
            "description": "The user's password.\n- It must be between 8 and 64 characters.\n- It can't contain spaces.\n- It must contain at least one uppercase and lowercase letter.\n- It must contain at least one number.\n- It must contain at least one symbol.\n- It can't be a common password.",
            "maxLength": 64,
            "minLength": 8
          },
          "username": {
            "type": "string",
            "description": "The user's username. It must be unique and start with a letter.\nIt can only contain English letters, numbers, and underscores.",
            "maxLength": 32,
            "minLength": 3
          }
        },
        "example": {
          "first_name": "First",
          "last_name": "Last",
          "password": "Password",
          "username": "Username"
        }
      },
      "ResetPasswordSchema": {
        "type": "object",
        "description": "Reset password schema. It's used to reset the user's password.",
        "required": [
          "old_password",
          "new_password"
        ],
        "properties": {
          "new_password": {
            "type": "string",
            "description": "The user's new password.\nThe user's password.\n- It must be between 8 and 64 characters.\n- It can't contain spaces.\n- It must contain at least one uppercase and lowercase letter.\n- It must contain at least one number.\n- It must contain at least one symbol.\n- It can't be a common password.",
            "maxLength": 64,
            "minLength": 8
          },
          "old_password": {
            "type": "string",
            "description": "The user's old passwprd.",
            "maxLength": 64,
            "minLength": 8
          }
        },
        "example": {
          "new_password": "NewPassword",
          "old_password": "OldPassword"
        }
      },
      "RoundsResultSchema": {
        "type": "object",
        "description": "The XO rounds result.",
        "required": [
          "x_player",
          "o_player",
          "draws",
          "boards"
        ],
        "properties": {
          "boards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BoardSchema"
            },
            "description": "All the rounds boards."
          },
          "draws": {
            "type": "integer",
            "description": "The rounds draws.",
            "minimum": 0.0
          },
          "o_player": {
            "type": "integer",
            "description": "The O player rounds wins.",
            "minimum": 0.0
          },
          "x_player": {
            "type": "integer",
            "description": "The X player rounds wins.",
            "minimum": 0.0
          }
        }
      },
      "SigninSchema": {
        "type": "object",
        "description": "The signin schema. It's used to signin a user.",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "password": {
            "type": "string",
            "description": "The user's password.",
            "maxLength": 64,
            "minLength": 8
          },
          "username": {
            "type": "string",
            "description": "The user's username.",
            "maxLength": 32,
            "minLength": 3
          }
        },
        "example": {
          "password": "Password",
          "username": "Username"
        }
      },
      "UpdateUserSchema": {
        "type": "object",
        "description": "The update user schema.",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The user's first name.",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "description": "The user's last name.",
            "nullable": true
          },
          "profile_image": {
            "type": "string",
            "description": "Profile png image base64 encoded. If it's not provided, the profile image will be deleted.\nMust be 128x128 pixels and less than 1MB in size.",
            "nullable": true
          }
        },
        "example": {
          "first_name": "first_name",
          "last_name": "last_name",
          "profile_image": "<IMAGE_BASE64>"
        }
      },
      "UserSchema": {
        "type": "object",
        "description": "The user's schema. It's used to return the user's data.",
        "required": [
          "uuid",
          "first_name",
          "username",
          "profile_image_path",
          "wins",
          "losts",
          "draw",
          "created_at"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The user's creation date. Joined date."
          },
          "draw": {
            "type": "integer",
            "format": "int64",
            "description": "The user's draw games."
          },
          "first_name": {
            "type": "string",
            "description": "The user's first name."
          },
          "last_name": {
            "type": "string",
            "description": "The user's last name.",
            "nullable": true
          },
          "losts": {
            "type": "integer",
            "format": "int64",
            "description": "The user's losts games."
          },
          "profile_image_path": {
            "type": "string",
            "description": "The user's profile image path."
          },
          "username": {
            "type": "string",
            "description": "The user's username. It's unique."
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The user's uuid. It's unique."
          },
          "wins": {
            "type": "integer",
            "format": "int64",
            "description": "The user's wins games."
          }
        },
        "example": {
          "created_at": "2024-01-31T17:33:51.541913209",
          "draw": 0,
          "first_name": "First",
          "last_name": "Last",
          "losts": 0,
          "profile_image_path": "./profile_images/default",
          "username": "Username",
          "uuid": "694df944-343a-4e48-8d92-5feadf2eb240",
          "wins": 0
        }
      },
      "UserSigninSchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserSchema"
          },
          {
            "type": "object",
            "required": [
              "jwt",
              "refresh_token"
            ],
            "properties": {
              "jwt": {
                "type": "string",
                "description": "The JWT token. It must be sent in the `Authorization` header.\nWill expire in 1 hour."
              },
              "refresh_token": {
                "type": "string",
                "description": "The refresh token. It must be sent in the `Authorization` header.\nWill be available after 58 minutes and will expire in 3 hours."
              }
            }
          }
        ],
        "description": "The user's signin schema. It's used to return the user's data and the JWT token.",
        "example": {
          "created_at": "2024-01-31T17:33:51.541923245",
          "draw": 0,
          "first_name": "First",
          "jwt": "<JWT>",
          "last_name": "Last",
          "losts": 0,
          "profile_image_path": "./profile_images/default",
          "refresh_token": "<REFRESH_TOKEN>",
          "username": "Username",
          "uuid": "ae427805-0706-4537-876d-de4a6b946c09",
          "wins": 0
        }
      },
      "XoSymbolSchema": {
        "type": "string",
        "description": "The Xo symbol.",
        "enum": [
          "X",
          "O"
        ],
        "example": "X"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "The JWT token of the user. Get it from the `/auth/signin` endpoint."
      }
    }
  }
}